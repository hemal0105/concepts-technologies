Download Terraform, extract and add into System variables path
    https://www.terraform.io/

    terraform version
        (check version and correctness of setup)

=================

terraform init
    (Initializes provider plugins)
terraform plan
    (generates and shows terraform execution plan)
terraform apply
    (shows execution plan again and upon user confirmation, creates resources)
terraform show
    (shows details of the created resource)
terraform show -json
    (shows details of the created resource in json form)
terraform destroy
    (deletes created resources mentioned in tf file)
terraform output
    (prints all output variables data)
terraform validate
    (validate the tf config files)
terraform fmt
    (formats tf files to improve readability)
terraform providers
    (see list of all providers used in config directory)
terraform apply -refresh-only
    (refresh state file with changes done outside of terraform manually)
terraform graph
    (creates resource dependency graph)
terraform import <resource id>
    (get resources created outside of terraform under the full control of terraform)
==================

terraform providers can be found from
    https://registry.terraform.io/browse/providers

terraform has following type of providers
    official: 
        owned and maintained by HashiCorp
        aws, gcp, azure or local
    partner: 
        owned and maintained by third party company which gone through partner provider process of HashiCorp
        bigip, heroku, digitalocean
    community:
        owned and maintained by individual members of community

terraform configuration directory can have any number of .tf files and apply command will create resources from all .tf
all resources can also be combined into a common .tf file and general naming convention followed for it is main.tf

variable can have 
    default value, 
    type
        string, number, boolean, any (default), list, map, set, object, tuple
    description
================================
example: list
    variable "prefix" {
        default = ["Mr", "Mrs", "Sir"]
        type = list(string)
    }

    resource "random_pet" "my-pet" {
        prefix = var.prefix[0]
    }

example: map
    variable file-content {
        type = map(string)
        default = {
            "statement1": "We love pets!"
            "statement1": "We love animals!"
        }
    }

    resource local-file my-pet {
        filename = "data/pets.txt"
        content = var.file-content["statement1"]
    }

example: object
    variable "bella" {
        type = object({
            name = string
            color = string
            age = number
            food = list(string)
            favorite_pet = bool
        })

        default = {
            name = "bella"
            color = "brown"
            age = 7
            food = ["myfood1", "myfood2"]
            favorite_pet = true
        }
    }
example: tuple
    variable kitty {
        type = tuple(string, number, bool)
        default = ["cat", 7, true]
    }
================
variables can also be added to .tfvars variable defination files
    if terraform.tfvars or *.auto.tfvars then auto loaded during apply
    else need to add like terraform apply -var-file variables.tfvars
variables can be set by diff ways but has precedence like below (low to high prio)
    environment variables
    terraform.tfvars
    *.auto.tfvars (alpha order)
    -var or -var-files (command line flags)
=================
output of one resource can be part of input of other resource
can define depends_on attribute to define explicite dependencies
=================
there are also output variables which stores output of a resource data
=================

Terraform state
    when first time terraform apply command is run, terraform.tfstate file gets created
    it has complete record of created infra resource into json form
    when any changes, it compares with state file and mofifies resources
    while removing resources, it would check from previous state for any dependencies and determine order of destroy accordingly
    uses state to verify real world infra for every apply, this would improve performance
    state is non optional feature
    for maintaining latest states across multiple developers, it can be stored remotly
    state files can have sensitive info like IPs, secrets etc. so its not recommended to store it in git or code repo
    it should be store in remote state backend like s3 or terraform cloud
    its not recommended to manually change state file

Immutable Infrastructure
    avoids configuration drift
    easier to version the infra and roll back in case of any issue

Lifecycle rules
    can be used to create updated version first and then older version to be deleted
    or do not delete older version at all
    syntax is to use Lifecycle block inside resource
        lifecycle {
            create_before_destroy = true
                or
            prevent_destroy = true
                or
            ignore_changes = all
        }

Datasources
    allows terraform to read the data from resources which are created outside of the terraform
    this data can be referenced into other resources

Meta Arguments
    can be used into any resource block to change the behaviour of the resources
    like creating loops or count to create same resource multiple times
        add count = 3 in resource block
        resource "local_file" "pet" {
            filename = var.filename[count.index]
            count = length(var.filename)
        }

        variable "filename" {
            default = [ "pets.txt", "dogs.txt", "cats.txt" ]
        }
    here if 1st file name is removed, it will change other two  files as well even there is no change
    to avoid this we can use for_each

Version Constraints
    by default init command fetchs latest version of providers
    we can use required_providers block containing all provider names and its versions

AWS Terraform
    provider "aws" {
        region = "us-west-2"
        access_key = "dummy-access-key"
        secret_key = "dummy-secret-key" 
    }
    setting credentials in .tf file like above is not recommended as it can be checked into git
    instead it can be set in .aws/credentials or via export command

Terraform Provisioners
    Allows us to perform task such as running commands or scripts on remote machine or local machine where terraform is installed
    To perform action on remote server there should be network connectivity like ssh
    default behaviour is Provisioners run during resource creation however we can configure it to run during destroy
    by default, when Provisioners fails, apply command fails and resource is marked as tainted
    we can mark Provisioners script as optional which does not fails the resource creation with apply step
    Provisioners should be used only when needed as any scripts can be added into it and Terraform can not model it
    Also it needs connectivity with remote server which always is not desirable
    Instead its recommended to build custom AMIs

Terraform tainted
    example: If writing public IP to a file using Provisioners fails, resource is marked as tainted
    Terraform will retry the tainted resource again after destroying it
    Even if EC2 is provisioned but Provisioners fails, EC2 will destroyed and Terraform will retry the resource creation
    There are commands to mark resource as taint and untraint

Terraform Debug
    Different log levels for Debug

Terraform Modules
    Creating similar resources would result in duplicate code and limits resusability
    module can refer to configurations from other directories
    we can create resources with specific properties and then we can reuse them
    we can also keep dynamic properties if needed.
    example: for creating ec2, we can keep instance type same but keep AMI as variable
    modules are like packages or libraries from other programming languages
    Modules can also be used from Terraform registry
    
